<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aban&#39;s blog</title>
  
  <subtitle>I am a programmer , not a imkuqin</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aban.fun/"/>
  <updated>2018-08-15T03:28:44.244Z</updated>
  <id>https://aban.fun/</id>
  
  <author>
    <name>Aban</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lambda表达式</title>
    <link href="https://aban.fun/2018/08/14/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://aban.fun/2018/08/14/Lambda表达式/</id>
    <published>2018-08-13T16:08:31.000Z</published>
    <updated>2018-08-15T03:28:44.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h1><p>由于之前一直使用的都是Java 7,对Java 8的一些新特性不甚了解。最近Aban学习了一下Java 8的一些新特性，在这里简单总结、分享一下。如有错误，还望指正。</p><h2 id="行为参数化的思想"><a href="#行为参数化的思想" class="headerlink" title="行为参数化的思想"></a>行为参数化的思想</h2><p>在使用Lambda表达式之前，我们应该先理解一个重要概念—-行为参数化。<br>行为参数化，简单来说，就是你准备好一个代码块，却不去执行它，这个代码块以后可以被程序其他部分调用。更通俗的说，就是把方法(你的代码)作为参数传递给另一个方法。<br><a id="more"></a><br><img src="/images/1.png" alt="img1"><br><img src="/images/2.png" alt="img2"><br>比如，将代码块传递给另一个方法，稍后去执行它。这个方法的行为就基于那块代码被参数化了。例如，你要处理一个集合，你一可能会写一个方法：</p><ul><li>对列表中的每个元素做“某件不可描述的事情”</li><li>在列表处理完后做“另一件不可描述的事情”</li><li>遇到错误时可以做“另外一件不可描述的事情”<h3 id="初试牛刀"><a href="#初试牛刀" class="headerlink" title="初试牛刀"></a>初试牛刀</h3>我们接下来看一个例子，然后展示一些让代码灵活的最佳做法。(<em><font color="brown">例子较长，请耐心观看~~</font></em>)<br>有一个农场仓库，里面有很多苹果，我们用一个list集合来表示。</li></ul><ol><li>农民伯伯想要找出所有的绿苹果，听起来很简单：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;Apple&gt; filterGreenApples(List&lt;Apple&gt; apples) &#123;</span><br><span class="line">List&lt;Apple&gt; greenApples = new ArrayList&lt;Apple&gt;();</span><br><span class="line"><span class="keyword">for</span>(Apple apple: apples) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"green"</span>.equals(apple.getColor())) &#123;</span><br><span class="line">greenApples.add(apple);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> greenApples;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>我们检出所有的绿苹果之后，农民伯伯改变注意了，想要找出各种颜色苹果：绿色，红色，黄色……</p><ol start="2"><li>再展身手，将颜色作为参数<br>针对农民伯伯的需求，我们可以把颜色作为参数，这样会更加灵活一点：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;Apple&gt; filterApples(List&lt;Apple&gt; apples,String color) &#123;</span><br><span class="line">List&lt;Apple&gt; result = new ArrayList&lt;Apple&gt;();</span><br><span class="line"><span class="keyword">for</span>(Apple apple: apples) &#123;</span><br><span class="line"><span class="keyword">if</span>(apple.getColor().equals(color)) &#123;</span><br><span class="line">result.add(apple);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>我们再复杂一点，农民伯伯又说，要是能区分轻的苹果和重的苹果就好了，大于100克的算是重的苹果。作为有职业操守的程序员，我们早可以想到农民伯伯可能要改变重量，于是又有了下面的方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;Apple&gt; filterApples(List&lt;Apple&gt; apples,int weight) &#123;</span><br><span class="line">List&lt;Apple&gt; result = new ArrayList&lt;Apple&gt;();</span><br><span class="line"><span class="keyword">for</span>(Apple apple: apples) &#123;</span><br><span class="line"><span class="keyword">if</span>(apple.getWeight() &gt; weight) &#123;</span><br><span class="line">result.add(apple);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>虽然有了解决方案，但这有点令人失望，因为中间有很多重复的代码。</p><ol start="3"><li>第三次尝试<br>我们可以把筛选颜色和重量弄到一个方法里面，定义一个标识来判断是筛选颜色还是重量：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;Apple&gt; filterApples(List&lt;Apple&gt; apples,String color,int weight,boolean flag) &#123;</span><br><span class="line">List&lt;Apple&gt; result = new ArrayList&lt;Apple&gt;();</span><br><span class="line"><span class="keyword">for</span>(Apple apple: apples) &#123;</span><br><span class="line">    <span class="keyword">if</span>((flag &amp;&amp; apple.getColor().equals(color)) ||</span><br><span class="line">    (!flag &amp;&amp; apple.getWeight() &gt; weight)) &#123;</span><br><span class="line">    result.add(apple);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>你可以这么用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; greenApples = filterApples(apples,<span class="string">"green"</span>,0,<span class="literal">true</span>);</span><br><span class="line">List&lt;Apple&gt; heavyApples = filterApples(apples,<span class="string">""</span>,100,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p>但说句实话，这个方案实在糟糕透了，如果需要组合属性做更复杂的查询，或者有更加复杂的需求，可能需要更加冗长复杂的代码(<em><font color="brown">你身为程序员的职业操守呢？？？</font></em>)</p><h3 id="运用行为参数化"><a href="#运用行为参数化" class="headerlink" title="运用行为参数化"></a>运用行为参数化</h3><p>从上面可以看到，我们需要一种更好的方法来应对变化的需求，需要更高层次的抽象。<br>我们可以根据Apple的属性，来返回一个boolean值，我们称之为<b>谓词</b>(即一个返回boolean值的函数)<br>首先，我们定义一个接口来对选择标准建模：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface ApplePredicate &#123;</span><br><span class="line">boolean <span class="built_in">test</span>(Apple apple);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后，我们就可以用ApplePredicate的多个实现来代表不同的选择标准：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class AppleColorPredicate implements ApplePredicate&#123;</span><br><span class="line">//选出绿苹果</span><br><span class="line">@Override</span><br><span class="line">public boolean <span class="built_in">test</span>(Apple apple) &#123;</span><br><span class="line">   <span class="built_in">return</span> <span class="string">"green"</span>.equals(apple.getColor());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class AppleWeightPredicate implements ApplePredicate&#123;</span><br><span class="line">//选出重的苹果</span><br><span class="line">@Override</span><br><span class="line">public boolean <span class="built_in">test</span>(Apple apple) &#123;</span><br><span class="line">   <span class="built_in">return</span> apple.getWeight() &gt; 100;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们的filter方法看起来是这样的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;Apple&gt; filterApples(List&lt;Apple&gt; apples,ApplePredicate p)&#123;</span><br><span class="line">    List&lt;Apple&gt; result = new ArrayList&lt;Apple&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Apple apple : apples) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p.test(apple)) &#123;</span><br><span class="line">        result.add(apple);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里，filterApples方法需要接受ApplePredicate对象，对Apple做条件测试。filterApples方法的行为取决于通过ApplePredicate对象传递的代码，换句话说，我们把filterApples方法的行为参数化了！(<em><font color="brown">身为程序员的你终于有了有一丝丝尊严！！！</font></em>)<br>由此，我们对行为参数化有了更精确的解释：<b>让方法接受多种行为作为参数，并在内部使用，来完成不同的行为。</b></p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ol><li><p>匿名类<br>上面的例子虽然最后算是找到一个<em><font color="brown">还算好一点</font></em>的方案,但还是有点费劲。我们可以使用匿名内部类，它允许你随用随建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; redApples = filterApples(apples,new <span class="function"><span class="title">ApplePredicate</span></span>() &#123;</span><br><span class="line">        //筛选红苹果</span><br><span class="line">        @Override</span><br><span class="line">        public boolean <span class="built_in">test</span>(Apple apple) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"red"</span>.equals(apple.getColor());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用Lambda表达式<br>但匿名类还是不够好，它往往很笨重，占用很多空间；而且很多程序员觉得它用起来很费解。(<em><font color="brown">唉，处女座就是麻烦…</font></em>)<br>在Java 8中，可以用Lambda表达式写成下面的样子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Apple&gt; result = filterApples(apples,(Apple apple) -&gt; <span class="string">"red"</span>.equals(apple.getColor()));</span><br></pre></td></tr></table></figure></li></ol><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Lambda表达式的基本语法是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br></pre></td></tr></table></figure></p><p>或(请注意语句的花括号)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(parameters) -&gt; &#123; statements; &#125;</span><br></pre></td></tr></table></figure></p><p>比如我们利用Lambda表达式比较两个苹果的重量：<br><img src="/images/3.png" alt="img3"><br>这个Lambda表达式有三个部分：</p><ul><li>参数列表 —— 这里采用了Comparator中compare方法的参数,两个Apple</li><li>箭头 —— 箭头 -&gt; 把参数列表和Lambda主体分隔开</li><li>Lambda主体 —— 比较两个Apple的重量，表达式就是Lambda的返回值了<h3 id="什么时候可以使用Lambda"><a href="#什么时候可以使用Lambda" class="headerlink" title="什么时候可以使用Lambda"></a>什么时候可以使用Lambda</h3>Lambda表达式是可以在<b>函数式接口</b>上使用的。<b>函数式接口</b>就是只定义一个抽象方法的接口。比如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public interface Predicate&lt;T&gt;&#123;</span><br><span class="line">    boolean <span class="built_in">test</span> (T t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Comparator&lt;T&gt;()&#123;</span><br><span class="line">    int compare(T o1,T o2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Runnable&#123;</span><br><span class="line">    void run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>其实，Lambda表达式允许你直接以内联的形式为函数式接口的抽象方法提供实现，并<em>把整个表达式作为函数式接口的实例</em>(确切来说，是函数式接口的一个具体实现的实例)。</p><h3 id="Lambda表达式的具体使用"><a href="#Lambda表达式的具体使用" class="headerlink" title="Lambda表达式的具体使用"></a>Lambda表达式的具体使用</h3><ol><li>如果我们想要从一个文件中读取一行所需的内容，可以定义这样的方法：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static String processFile() throws IOException &#123;</span><br><span class="line">    try (BufferedReader br = </span><br><span class="line">            new BufferedReader(new FileReader(<span class="string">"data.txt"</span>)))&#123;</span><br><span class="line">        <span class="built_in">return</span> br.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>那如果要读取两行呢，这时候我们就应该记起来行为参数化。</p><ol start="2"><li>使用函数式接口来传递行为<br>前面已经说过，Lambda仅可用于上下文是函数式接口的情况。我们需要创建一个匹配BufferedReader -&gt; String，还可以抛出异常的接口。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface BufferedReaderProcessor &#123;</span><br><span class="line">    String process(BufferedReader br) throws IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>现在，我们可以把这个接口作为processFile方法的参数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static String processFile(BufferedReaderProcessor p) throws Exception&#123;</span><br><span class="line">        try (BufferedReader br = </span><br><span class="line">              new BufferedReader(new FileReader(<span class="string">"data.txt"</span>)))&#123;</span><br><span class="line">            <span class="built_in">return</span> p.process(br);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>传递Lambda<br>现在我们就可以通过传递不同的Lambda重用processFile方法，以不同方式处理文件。</li></ol><ul><li><p>处理一行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String oneLine = processFile((BufferedReader br) -&gt; br.readLine());</span><br></pre></td></tr></table></figure></li><li><p>处理两行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String twoLine = processFile((BufferedReader br) -&gt; br.readLine() + br.readLine());</span><br></pre></td></tr></table></figure></li></ul><h2 id="几种函数式接口"><a href="#几种函数式接口" class="headerlink" title="几种函数式接口"></a>几种函数式接口</h2><p>Java 8中常用的函数式接口有三个:Predicate,Consumer,Function。这里我们简单介绍使用一下，具体使用有兴趣可以自己实践下。</p><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p>java.util.function.Predicate<t>接口定义了一个名叫test的抽象方法，它接受泛型T对象，并返回一个boolean。在需要表示一个涉及类型T的布尔表达式时，可以使用这个接口。比如，你可以定义一个接受String对象的Lambda表达式。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface Predicate&lt;T&gt; &#123;</span><br><span class="line">    boolean <span class="built_in">test</span>(T t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static &lt;T&gt; List&lt;T&gt; filter(List&lt;T&gt; list, Predicate&lt;T&gt; p) &#123; </span><br><span class="line">    List&lt;T&gt; results = new ArrayList&lt;&gt;(); </span><br><span class="line">    <span class="keyword">for</span>(T s: list)&#123; </span><br><span class="line">        <span class="keyword">if</span>(p.test(s))&#123; </span><br><span class="line">            results.add(s); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">return</span> results; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">Predicate&lt;String&gt; predicate = (String s) -&gt; !s.isEmpty(); </span><br><span class="line">List&lt;String&gt; nonEmpty = filter(listOfStrings, predicate);</span><br></pre></td></tr></table></figure></t></p><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>java.util.function.Consumer<t>接口定义了一个名叫accept的抽象方法,它接受泛型T，没有返回值(void)。如果需要访问类型T的对象，并对其执行某些操作，可以使用这个接口。<br>比如定义一个forEach方法，接受一个Integer类型的列表，并对每个元素执行打印操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface Consumer&lt;T&gt; &#123;</span><br><span class="line">    void accept(T t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static &lt;T&gt; void forEach(List&lt;T&gt; list,Consumer&lt;T&gt; c) &#123;</span><br><span class="line">    <span class="keyword">for</span>(T i: list) &#123;</span><br><span class="line">        c.accept(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">forEach(</span><br><span class="line">    Arrays.asList(1,2,3,4,5),(Integer i) -&gt; System.out.println(i)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></t></p><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>java.util.function.Function&lt;T, R&gt;接口定义了一个叫作apply的方法，它接受一个泛型T的对象，并返回一个泛型R的对象。如果需要定义一个Lambda，将输入的信息映射到输出，可以使用这个接口(比如提取苹果的重量，或把字符串映射为它的长度)。<br>比如，定义一个map方法，将一个String列表映射到包含每个String长度的Integer列表。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface </span><br><span class="line">public interface Function&lt;T, R&gt;&#123; </span><br><span class="line">    R apply(T t); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">public static &lt;T, R&gt; List&lt;R&gt; map(List&lt;T&gt; list, Function&lt;T, R&gt; f) &#123;   </span><br><span class="line">    List&lt;R&gt; result = new ArrayList&lt;&gt;(); </span><br><span class="line">    <span class="keyword">for</span>(T s: list)&#123; </span><br><span class="line">        result.add(f.apply(s)); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">return</span> result; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">// [6,3,6]</span><br><span class="line">List&lt;Integer&gt; list = map(</span><br><span class="line">Arrays.asList(<span class="string">"lambda"</span>,<span class="string">"int"</span>,<span class="string">"action"</span>),</span><br><span class="line">(String s) -&gt; s.length()</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>我们上面写到的Lambda表达式是很方便的，但确实它们可以再简洁一点，比如先前比较两个苹果重量的Lambda表达式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apples.sort((Apple a1,Apple a2) -&gt; a1.getWeight().compareTo(a2.getWeight()));</span><br></pre></td></tr></table></figure></p><p>使用<em><b> 方法引用 </b></em>和 java.util.Comparator.comparing 可以写成这样子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apples.sort(comparing(Apple::getWeight));</span><br></pre></td></tr></table></figure></p><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><p>方法引用显式地指明调用的方法的名称，使代码的<b>可读性更好</b>。<br>当你想要使用方法引用时，目标引用放在分隔符 : : 前，方法名称放在后面：<br><img src="/images/4.png" alt="img4"><br>下面给出了一些Java 8中方法引用的例子：<br><img src="/images/5.png" alt="img5"></p><h3 id="如何构建"><a href="#如何构建" class="headerlink" title="如何构建"></a>如何构建</h3><p>方法引用主要有三类。</p><ol><li><p>指向<em>静态方法</em>的方法引用(例如Integer 的 parseInt 方法)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer :: parseInt</span><br></pre></td></tr></table></figure></li><li><p>指向<em>任意类型实例方法</em>的方法引用(例如String 的 length 方法)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String :: length  //实例为方法参数</span><br></pre></td></tr></table></figure></li><li><p>指向<em>现有对象的实例方法</em>的方法引用(假设你有一个局部变量transaction，为Transaction类型，它支持实例方法getValue，就可以写成下面这样)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transaction :: getValue  //实例为外部对象</span><br></pre></td></tr></table></figure></li></ol><p>第2钟和第3钟乍一看有点晕，其实第二种方法引用的思想就是你在引用一个对象的方法，这个对象本身是lambda的一个参数；第三种方法引用是你再调用一个已经存在的外部对象的方法。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在了解了Lambda表达式的和方法引用的用法之后，你就可以自己去尝试用Lambda表达式去简化一些代码了(你可以自己去练习一下)。不过用于传递Lambda表达式的Comparator、Function、Predicate等函数式接口提供了允许你进行复合的方法。这意味着你可以把多个简单的Lambda复合成复杂的表达式。有兴趣的童鞋可以自己去了解下，这里不再详细讲解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简言&quot;&gt;&lt;a href=&quot;#简言&quot; class=&quot;headerlink&quot; title=&quot;简言&quot;&gt;&lt;/a&gt;简言&lt;/h1&gt;&lt;p&gt;由于之前一直使用的都是Java 7,对Java 8的一些新特性不甚了解。最近Aban学习了一下Java 8的一些新特性，在这里简单总结、分享一下。如有错误，还望指正。&lt;/p&gt;
&lt;h2 id=&quot;行为参数化的思想&quot;&gt;&lt;a href=&quot;#行为参数化的思想&quot; class=&quot;headerlink&quot; title=&quot;行为参数化的思想&quot;&gt;&lt;/a&gt;行为参数化的思想&lt;/h2&gt;&lt;p&gt;在使用Lambda表达式之前，我们应该先理解一个重要概念—-行为参数化。&lt;br&gt;行为参数化，简单来说，就是你准备好一个代码块，却不去执行它，这个代码块以后可以被程序其他部分调用。更通俗的说，就是把方法(你的代码)作为参数传递给另一个方法。&lt;br&gt;
    
    </summary>
    
      <category term="Java 8" scheme="https://aban.fun/categories/Java-8/"/>
    
    
      <category term="Lambda" scheme="https://aban.fun/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://aban.fun/2018/08/13/hello-world/"/>
    <id>https://aban.fun/2018/08/13/hello-world/</id>
    <published>2018-08-13T07:11:58.516Z</published>
    <updated>2018-06-28T09:56:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="分类1" scheme="https://aban.fun/categories/%E5%88%86%E7%B1%BB1/"/>
    
    
  </entry>
  
</feed>
